#- alias: Allume le salon a la tombee de la nuit
#  trigger:
#    platform: state
#    event: sensor.broadlinklight
#    from: 'normal'
#    to: 'sombre'
#  condition:
#    - condition: state
#      entity_id: input_boolean.lumieresalon
#      state: 'on'
#    - condition: state
#      entity_id: sensor.broadlinklight 
#      state: 'sombre'
#  action:
#    - service: light.turn_on
#      entity_id: group.lumieressalon
#      data:
#        brightness: 30
- alias: fermer les volets du salon quand la nuit tombe
  trigger:
#    platform: sun
#    event: sunset
#    offset: "-00:10:00"
    platform: numeric_state
    entity_id: sun.sun
    value_template: '{{ state.attributes.elevation }}'
    below: 2.5
  condition:
    - condition: state
      entity_id: input_boolean.volets
      state: 'on'
#    - condition: state
#      entity_id: sensor.broadlinklight
#      state: 'sombre' 
  action:
    - service: light.turn_on
      entity_id: group.lumieressalon
      data:
        brightness: 254
    - service: switch.turn_off
      entity_id: switch.volet_salon
    - service: notify.notifier_seb
      data:
        message: Les volets du salon sont fermes !
- alias: ouvrir les volets du salon quand le jour se leve
  trigger:
    platform: sun
    event: sunrise
  condition:
    - condition: state
      entity_id: input_boolean.volets
      state: 'on'
  action:
    service: switch.turn_on
    entity_id: switch.volet_salon
- alias: Poubelles a sortir
  trigger:
    platform: state
    entity_id: sensor.poubelles
    to: 'on'
    from: 'off'
  condition:
    - condition: state
      entity_id: input_boolean.poubelles
      state: 'on'
  action:
    - service: notify.notifier_seb
      data:
        message: 'Monsieur, il faudrait sortir les {{ states.calendar.ordures.attributes.message }}.'
    - service: notify.notifier_klem
      data:
        message: 'Mademoiselle, il faudrait sortir les {{ states.calendar.ordures.attributes.message }}.'
- alias: Wake Me Up
  trigger:
    platform: time
    minutes: '/1'
    seconds: 0
  condition:
    - condition: state
      entity_id: input_boolean.alarmstatus
      state: 'on'
    - condition: template
      value_template: '{{ now().strftime("%-H:%-M") == states.sensor.alarm_time.state }}'
    - condition: state
      entity_id: calendar.jours_feries_en_france
      state: 'off'
    - condition: time
      weekday:
        - mon
        - tue
        - wed
        - thu
        - fri
  action:
    - service: notify.notifier_seb
      data:
        message: 'Bonjour Seb. Il faut se lever, il est {{ states.sensor.alarm_hour.state }}h{{ states.sensor.alarm_minutes.state }}. La temperature exterieure est de {{ states.sensor.yweather_temperature.state }} degrés et la météo prévoit {{ states.sensor.forecast.state }}.'
- alias: "Chromecast paused"
  trigger:
    platform: state
    entity_id: media_player.chromecast_salon
    state: 'paused'
  condition:
    - condition: state
      entity_id: light.tradfri_bulb_e14_ws_opal_400lm_2
      state: 'on'
  action:
    - service: light.turn_on
      entity_id: group.lumieressalon
      data:
        brightness: 254
- alias: "Chromecast playing"
  trigger:
    platform: state
    entity_id: media_player.chromecast_salon
    state: 'playing'
  condition:
    - condition: state
      entity_id: light.tradfri_bulb_e14_ws_opal_400lm_2
      state: 'on'
  action:
    - service: light.turn_on
      entity_id: group.lumieressalon
      data:
        transition: 50
        brightness: 15
- alias: "Chromecast stopped"
  trigger:
    platform: state
    entity_id: media_player.chromecast_salon
    to: 'stopped'
    from: 'playing'
  condition:
    - condition: state
      entity_id: light.tradfri_bulb_e14_ws_opal_400lm_2
      state: 'on'
  action:
    - service: light.turn_on
      entity_id: group.lumieressalon
      data:
        brightness: 254
- alias: "Update Available Notification"
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: updater.updater
  action:
    - service: notify.notifier_seb
      data:
        message: "HomeAssistant {{ states('updater.updater') }} is now available"
        title: "Update HASS"
    - service: persistent_notification.create
      data:
        title: "Update Available"
        message: >
          Home Assistant {{ states('updater.updater') }} is available, please [update](https://home-assistant.io/getting-started/installation-raspberry-pi-all-in-one/#upgrading).
        notification_id: "update_available"
